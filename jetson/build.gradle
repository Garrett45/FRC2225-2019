import jaci.gradle.toolchains.*
import jaci.gradle.nativedeps.*

plugins {
    id "cpp"
    id "edu.wpi.first.GradleRIO" version "2019.1.1-beta-4a"      
}

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
    targets {
        target("jetson") {
            directory = '/home/nvidia/'       // Note: must be an absolute path
            failOnMissing = true   // Just in case our coprocessor is missing. Optional.

            locations {
                ssh {
                    address = '10.42.0.186'  // Required. The address to try
                    user = 'nvidia'             // Required. The user to login as
                    password = 'nvidia'               // The password for the user. Default: blank (empty) string
                    ipv6 = false                // Are IPv6 addresses permitted? Default: false
                }
            }
        }
    }
    artifacts {
        nativeArtifact('jetsonCode') {
            targets << "jetson"
            component = 'myCoprocessorComponent'
            targetPlatform = 'rpiArm'
        }
    }
}

//model {
//    platforms {
//        // Since I'm cross-compiling, I need to define my Target Platform. In this case, we'll call it 'rpiArm'
//        // and make it detect as a linux, arm toolchain.
//        'jetson' {
//            operatingSystem 'linux'
//            architecture 'arm'
//        }
//    }
//    toolChains {
//        jetsonGcc(Gcc) {
//            // This toolchain will respond to my rpiArm platform
//            setTargets('jetsonArm')
//            eachPlatform {
//                // Defining my gcc, ar, g++, etc binaries to use the 'arm-linux-gnueabihf' prefix, with no suffix. 
//                // This is the prefix the Raspberry Pi uses, but may be different for your coprocessor.
//                defineTools(it, 'arm-linux-gnueabihf-', '')
//
//                // Here we're just simply telling Gradle that we want to compile with C++11. 
//                linker.withArguments { a -> a << '-std=c++11'}
//            }
//            // Here I'm telling Gradle where my toolchain is located. In this case, it is relative to my project directory.
//            // The path given MUST be absolute.
//            // Your tools will have to be a clone of https://github.com/raspberrypi/tools in your home directory.
//            path(project.file('~/tools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian-x64/bin').absolutePath)
//        }
//    }
//    components {
//        // Here is where I finally define my native component, in this case, an executable file.
//        myCoprocessorComponent(NativeExecutableSpec) {
//            // Target the Raspberry Pi
//            targetPlatform 'jetsonArm'
//            // This is where our source files are located (src/cpp for C++ files, src/include for headers)
//            source {
//                srcDir 'src/cpp'
//                include '**/*.cpp'
//            }
//            exportedHeaders {
//                srcDir 'src/include'
//                include '**/*.hpp', '**/*.h'
//            }
//        }
//    }
//}